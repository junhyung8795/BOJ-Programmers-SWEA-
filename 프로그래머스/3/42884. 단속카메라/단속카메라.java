import java.util.*;
class Solution {
    public int solution(int[][] routes) {
        int answer = 0;
        
        //카메라는 언제 설치하는 것이 좋을까? 한 구간에서 가능한한 맨 뒤에 설치하는 것이 좋다
        //왜냐하면 구간 중간에 설치했다가 다른 주행구간이 앞에있던 구간과 겹치는게 조금이라도 있음에도 불구하고
        //중간보다 더 뒤에 있어서 카메라로 촬영을 못한다면 낭비가 된다. 맨뒤에 설치했다면 다음 주행 구간의 시작지점이 앞의 종료 지점을 넘는 경우면 몰라도
        //조금이라도 겹치는 주행 구간이 있다면 한개의 카메라로 두 차량을 촬영가능하다.
        //그렇다면 시작지점이 빠른 순 우선으로 골라야할까
        //종료지점이 빠른 순 우선으로 골라야할까
        //[1 13][10 15]의 경우 [1 13]의 끝인 13지점에 카메라를 설치해야한다.
        //[1 13] [2 5]라는 테케를 가정해보자. 시작지점이 빠르면 종료지점이 극도로 늦어도 상관없는가?
        //그러나 이때는 2 5라는 구간의 5번 자리에 카메라를 설치해야한다.
        //그런데 그냥 13번자리랑 5번 자리 둘다 놓고 13번 구간 보다 작거나 같은 또다른 도로주행 구간을 노려봐도 좋지 않을까? 
        //하지만 만약에 [1 7]이라는 도로주행 구간이 온다면 어떨까?
        //비교를 위해 [12 15]라는 구간도 추가해보자
        //---------------------------------
        // [1                      13]
        //     [2   5]
        // [1           7]
        //                      [12        15]
        //5라는 구간에 카메라를 꽂으니 5보다 종료구간이 뒤에 있는 애들 중 
        //5보다 시작구간이 앞인 차량들은 전부 5에 꽂힌 카메라에 촬영된다.
        //5라는 지점에 카메라를 설치해놓고 5보다 시작구간이 뒤엔 [12 15]가 나타나면
        //그제서야 카메라를 하나 더 추가하는게 효율적이다.
        //정리를 하자면 종료구간이 가장 앞에 있는 주행구간의 끝에 카메라를 설치하는게
        //장래에 나타날 모든 구간에 대해서 만약 5보다 작은 시작구간을 가지고 있다면
        //카메라를 그만큼 절약할 수 있다.
        //그렇다면 같은 종료구간일때는 시작 구간이 앞에 있는 게 좋을까 뒤에 있는게 좋을까?
        //앞선 예시대로 일단 앞에 있는 구간의 종료지점에서 카메라를 설치했을 때
        //최대한 다음 구간의 시작지점은 카메라보다 앞에 있는게 효율적이다.
        //따라서 도로주행 구간을 종료지점이 빠른애를 우선으로 종료지점이 같으면 시작지점이 빠른 구간을 우선으로 선정한다.
        
        Arrays.sort(routes, (a,b) -> {
            if(a[1] != b[1]){
                return a[1] - b[1];
            }else{
                return a[0] - b[0];
            }
        });
        
        int curCameraPos = -30001;
        for(int i = 0; i <routes.length; i++){
            if(curCameraPos < routes[i][0]){
                //만약 현재 카메라 위치에서 다음 구간의 시작지점이 멀어서 커버 못하면
                //카메라를 하나 더 설치한다.
                answer += 1;
                //대신 그 위치는 해당 구간의 종료지점
                curCameraPos = routes[i][1];
            }
        }
        return answer;
    }
}